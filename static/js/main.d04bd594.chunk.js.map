{"version":3,"sources":["components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostItem","post","selectedPostId","setSelectedPostId","className","userId","title","type","onClick","currentValue","id","PostsList","postsFromServer","map","NewCommentForm","postId","postComments","useState","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","onSubmit","e","preventDefault","newComment","Date","toString","name","email","body","placeholder","value","onChange","event","target","required","minLength","API_SERVER","getData","url","a","fetch","response","ok","Error","status","json","sendData","newCommient","requestOptions","method","headers","PostDetails","postDetails","setPostDetails","isDisplayComment","setIsDisplayComment","setPostComments","useEffect","then","getPostComments","respComment","length","disabled","comment","targetCommentId","currentTarget","parentElement","dataset","newPostComments","filter","item","deletePostComment","JSON","stringify","catch","error","App","selectedUserId","setSelectedtUserId","setPostsFromServer","endPoint","getUserPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d04bd594.chunk.js","sourcesContent":["import React from 'react';\nimport { UserPost } from '../../react-app-env';\n\ntype PostItemType = {\n  selectedPostId: number,\n  post: UserPost,\n  setSelectedPostId: (postId: number) => void,\n};\n\nexport const PostItem: React.FC<PostItemType> = ({\n  post, selectedPostId, setSelectedPostId,\n}) => {\n  return (\n    <li className=\"PostsList__item\">\n      <div>\n        <b>{`[User #${post.userId}]: `}</b>\n        <p>{post.title}</p>\n      </div>\n      <button\n        type=\"button\"\n        className=\"PostsList__button button\"\n        onClick={() => {\n          const currentValue = selectedPostId === post.id ? -1 : post.id;\n\n          setSelectedPostId(currentValue);\n        }}\n      >\n        {selectedPostId === post.id ? 'Close' : 'Open'}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './PostsList.scss';\nimport { UserPost } from '../../react-app-env';\nimport { PostItem } from '../PostItem/PostItem';\n\ntype PostListType = {\n  selectedPostId: number,\n  postsFromServer: UserPost[],\n  setSelectedPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<PostListType> = ({\n  postsFromServer, selectedPostId, setSelectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsFromServer.map(post => (\n          <PostItem\n            key={post.id}\n            post={post}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n          />\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport { PostCommentType } from '../../react-app-env';\n\ntype NewCommentFormType = {\n  postId: number,\n  postComments: (newComment: PostCommentType) => void,\n};\n\nexport const NewCommentForm: React.FC<NewCommentFormType> = ({ postId, postComments }) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n\n  const addNewComment = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    const newComment = {\n      id: +`${postId}${Date.toString}`,\n      postId,\n      name: userName,\n      email: userEmail,\n      body: userComment,\n    };\n\n    postComments(newComment);\n\n    setUserName('');\n    setUserEmail('');\n    setUserComment('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={addNewComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={userName}\n          onChange={(event) => setUserName(event.target.value)}\n          required\n          minLength={4}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={userEmail}\n          onChange={(event) => setUserEmail(event.target.value)}\n          required\n          minLength={6}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={userComment}\n          onChange={(event) => setUserComment(event.target.value)}\n          required\n          minLength={6}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","const API_SERVER = 'https://mate.academy/students-api';\n\nconst getData = async (url: string) => {\n  const response = await fetch(API_SERVER + url);\n\n  if (!response.ok) {\n    throw new Error(`Error: ${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const sendData = async (newCommient: string, postId: number) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charsrt=utf-8',\n    },\n    body: newCommient,\n  };\n\n  fetch(`${API_SERVER}/comments?postId=${postId}`, requestOptions);\n};\n\nexport const deleteData = async (postId: number) => {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json;charsrt=utf-8',\n    },\n  };\n\n  fetch(`${API_SERVER}/comments?postId=${postId}`, requestOptions);\n};\n\nexport const getUserPost = (userId: number) => {\n  const endPoint = userId === 0\n    ? '/posts'\n    : `/posts/?userId=${userId}`;\n\n  return getData(endPoint);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return getData(`/posts/${postId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return getData(`/comments/?postId=${postId}`);\n};\n","/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  PostDetailsType, UserPost, PostCommentType,\n} from '../../react-app-env';\nimport { getPostDetails, getPostComments, sendData } from '../../api/posts';\n\nexport const PostDetails: React.FC<PostDetailsType> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<UserPost | undefined>();\n  const [isDisplayComment, setIsDisplayComment] = useState(false);\n  const [postComments, setPostComments] = useState<PostCommentType[]>([]);\n\n  useEffect(() => {\n    if (selectedPostId >= 0) {\n      getPostDetails(selectedPostId)\n        .then(response => setPostDetails(response));\n      getPostComments(selectedPostId)\n        .then(respComment => setPostComments(respComment));\n    }\n  }, [selectedPostId]);\n\n  const addPostComments = (newComment: PostCommentType) => {\n    setPostComments([...postComments, newComment]);\n\n    sendData(JSON.stringify(newComment), selectedPostId)\n      .catch((error) => {\n        throw new Error(error);\n      });\n  };\n\n  const deletePostComment = (comment: React.MouseEvent<HTMLButtonElement>) => {\n    const targetCommentId = comment.currentTarget.parentElement?.dataset.id;\n    const newPostComments = postComments.filter((item) => `${item.id}` !== targetCommentId);\n\n    setPostComments([...newPostComments]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>{`Post details: ${postDetails?.title}`}</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length !== 0 ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsDisplayComment(!isDisplayComment)}\n          >\n            {isDisplayComment\n              ? `Hide ${postComments.length} comments`\n              : `Show ${postComments.length} comments`}\n          </button>\n        )\n          : (<button type=\"button\" className=\"button\" disabled>No comments</button>)}\n        <ul className=\"PostDetails__list\">\n          {isDisplayComment && postComments.map((comment) => (\n            <li key={comment.id} data-id={comment.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={(event) => deletePostComment(event)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={selectedPostId} postComments={addPostComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPost } from './api/posts';\n\nimport { UserPost } from './react-app-env';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedtUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(-1);\n  const [postsFromServer, setPostsFromServer] = useState<UserPost[]>([]);\n\n  useEffect(() => {\n    getUserPost(selectedUserId).then(response => {\n      setPostsFromServer(response);\n    });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={(event) => setSelectedtUserId(+event.target.value)}>\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsFromServer={postsFromServer}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={(postId: number) => setSelectedPostId(postId)}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== -1 ? (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          ) : (<h4>Choose a post</h4>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}